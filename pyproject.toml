[build-system]
requires = ["scikit-build-core>=0.4.3", "nanobind>=1.3.2"]
build-backend = "scikit_build_core.build"

[project]
name = "vocd"
version = "0.1.0"
description = "Python bindings for the Voronoi Convex Decomposition Algorithm"
readme = "README.md"
requires-python = ">=3.8"
authors = [
    { name = "Johnathon Selstad", email = "makeshifted@gmail.com" }
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "numpy>=1.20.0",
]

[project.urls]
Homepage = "https://github.com/zalo/vocd"

[tool.scikit-build]
wheel.expand-macos-universal-tags = true
cmake.minimum-version = "3.15"
cmake.build-type = "Release"
sdist.include = [
    "src/",
    "extern/",
    "CMakeLists.txt",
    "README.md",
    "LICENSE",
]
sdist.exclude = [
    "extern/**/.git",
    "extern/**/build",
    "extern/**/dist",
]

[tool.cibuildwheel]
# Build for common platforms
build = "cp38-* cp39-* cp310-* cp311-* cp312-*"

# Skip 32-bit builds, PyPy, and musllinux
skip = ["*-win32", "*-manylinux_i686", "pp*", "*-musllinux*"]

# Test imports
test-command = "python -c \"import vocd; print(vocd.__version__)\""
test-requires = ["numpy"]

# Use latest manylinux images
manylinux-x86_64-image = "manylinux2014"
manylinux-aarch64-image = "manylinux2014"

# Environment variables for builds
[tool.cibuildwheel.linux]
before-all = "yum install -y epel-release && yum install -y cmake3"
environment = { CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release" }

[tool.cibuildwheel.macos]
before-all = "brew install cmake"
environment = { CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release", MACOSX_DEPLOYMENT_TARGET="10.14" }
archs = ["x86_64", "arm64", "universal2"]

[tool.cibuildwheel.windows]
before-build = "pip install delvewheel"
repair-wheel-command = "delvewheel repair -w {dest_dir} {wheel}"
environment = { CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release" }